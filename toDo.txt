___Done:___
Styling and Structure:
- Add URLs for products page on all nav includes and shop now button
- Add new products details function in views.py, copy all_products view and change details. Test first if possible.
- Update urls page with the product ID as the slug, view change and name to match view.
- Create products detail html page.
- Link the card anchors to the product detail page.
- Link the image on products detail to a new tab with just the image
- Add in the media query "max-width: 991px" if the header needs moving down.

Search:
- "action" attribute for the search bar form to link to the products in mobile nav and base.html.
- Change name attribute for search bar input.
- Views.py function for a get request with the name attribute within the get request.

Sorting and Filtering:
- In the views.py add an if statement that checks for categories and filter the results based on those categories.
- In the nav html documents, add the category searches into the link URLs.
- Add URLs to all products selections with ?price&direction=asc afterwards. main nav and side nav.
- current_sorting = f'{sort}_{direction}' in views.py
- Views.py, import Lower and everything in the if sort in request
- Add a category display on each product card on the list products page and product detail page
- Add html for a selection box in the products.html file for selecting how to sort the products.
- In views.py, add if sortkey == 'category': sortkey = 'category__name', so the categories are sorted by name rather than ID.
- Add a catergory display next to the products title at the top of the content of the page, using the current categories varibale.
-- Add a cross button to remove the chosen category from the filter.
-- When selecting a different sort function, have a toggle for asc or desc
- Create JS function that changes the sort selector. Done by getting the selector value and the url, splitting the selector value into type of sort and direction, and setting the URL to the new value, if the selector value - reset. Else the sort and direction will be deleted.
--To add the toggle function, add a new function that targets the toggle, and changed the url of the toggle is clicked.
- Fix a bug where the parent category doesn't display all the children.

Scroll to top:
- Add a back to top button onto list products page.
- Add script to scroll back to the top of the page.
-- Add a button the scroll up 1 line or down 1 line, so that every time the button is clicked it will display all new products.
-- Add a button that appears when a catergory is selected, to remove category filters.

Shopping cart:
- Add new app called cart and add app to settings.
- Create a new views function within the cart app.
- Create new directory: cart/templates/cart/cart.html.
- Copy index.html into cart.html and remove the content block.
- Copy the landing_page urls.py file to the cart app.
- Implement the cart urls in the project urls file.
- In base.html and other navigation files, implement the href url for the cart.
- Create the content for the cart template. Has to have an empty cart if statement.
- Create cart/contexts.py to help with the cart functionality
- Add the context to the context processor in settings. "'cart.contexts.cart_contents',"
- Add the "MIN_FREE_DELIVERY" & "MIN_HALF_DELIVERY" & "STANDARD_DELIVERY_PERCENTAGE"


___Pending:___
Misc
- Add testing for python functions. 
    - Views.py across all apps
        - Test for response codes to ensure page loads.
        - Test any Post requests with correct inputs and incorrect.
        - Test get requests return the correct responses.
    - Test context.py
        - Test for the correct results with pricing.    
        - Test for two descimal places.

!-- Create a dedicated image view page.
!-- Overlay product image when clicked on the list_products.
-- Go through all the aria labels.
- Annotate
    - Cart app
        - Python files 
        - Templates 
    - Products app
        - Python files 
        - Templates 
    - Landing page app
        - Python files 
        - Templates 
    - Templates dir
        - Include files
        - Base.html
        - Toasts
    - JS   
        - Doc strings for functions
        - Actions that are taking place.   
    - CSS

Featured products
-- Add a featured products box on the home page
-- Add admin functionality to add products to featured product either, on the product page, on the featured products admin page and on the products list admin page.


Special Offers
-- Add a boolean field to product model called deal and is_new
-- Add an admin option to create a deal on a product based on percentage discount.
-- Function the change deal field automatically if a deal is applied.
-- Change the category function to search for active deal and is_new fields if that is what selected.
-- Create a script that displays products with deals, to use on multiple pages.


Scroll to top:
-- Adjust the up one row function so the first click will go up a level and center the row.


Sorting products:
- Add different categories. -- Needs more categories to sort by


Shopping cart:
-- On the cart page, add a row of 4 random products to the bottom of the page, with an add to cart button. When clicked: Message saying item added to cart, adds item to cart, that product will then be replaced by another product on the bottom of the screen"


Product page:
!-- White container background, leaving the off white background as a large border.
    Left top:
    !-- Image
    !-- Zoom button overlayed on the picture.

    Right of image:
    !-- Title to the right with tags underneath.
    !-- Rating.
    -- Quantity selector.
    !-- Free delivery over [MIN_FREE_DELIVERY] 
    !-- Half price delivery over [MIN_HALF_DELIVERY].
    !-- Price with different colour text to stand out. 
    -- Product delivery cost [STANDARD_DELIVERY_PERCENTAGE].
    !-- Add to cart and buy now button at the bottom.

    Underneath both:
    -- Description on the left
    -- Related Products on the right.
-- List tags under an accordion
-- Tags and rating on the same line


List Products:
-- On the list product page on phones, the images should be larger and not squashed for the products, maybe change to a side image card.
-- The department toggle button should start under the quantity of products line, then scroll with the page when scrolled enough.


Nav:
-- Hovering over the main categories should drop the menu down.
-- Implement a free delivery and half delivery tick box.


Adding products:
ht !- Add form with POST function to Product detail template.
py !- Add to cart view in cart/views.py
        !- Gets the current cart varible from the session.
        !- gets the redirect url
        !- If product_size is in request.POST then store it in the size variable
        !- If the item has a size variable, and if the item with the correct size is in the cart, the quantity should go up by the quantity amount
        !- If the item has a size variable, and the item is in the cart but not the correct size, add the item with the correct size to the cart
        !- If the item isn't in the cart already, then add the item, with the correct size into the cart.
        !- If the item doesn't have a size and is already in the cart, add the quantity to the item
        !- If the item without a size isn't in the cart, add it to the cart.
        !- Updates the session cart varible with the new cart variable
        !- Redirects the user to the redirect URL
py !- Add to cart url in cart/urls.py
gi !- git commit added cart functionality
py !- In contexts.py add the "cart = request.session.get('cart', {})" to add to, or create the cart session
ht !- Add the "for item_id, quantity in cart.items():" loop.
ht !- In cart.html add html to show each product in table form.
gi !- git commit "Updated shopping cart template"
py !- Add has_sizes to product model.
py !- Migrate
ht !- In the form on product_detail.html, add an if statement, if the product has sizes, add a selector for the size.
ht -- Add the size selector after add to cart has been clicked. -- Possibly add a 'purchasing' container for add to cart, buy now, size selector and quantity.
ht !- Add if statement to adjust page layout
ht !- Add size to the cart template. -- In an IF statment to only show if product has_sizes.
gi !- git commit -m Added product sizes functionality.
    Adding size information to the shopping cart:
    !- In add_to_cart view set size to none to start. Then if request.Post has product_size, set size to equal request.POST['size'].
    !- To adjust the structure of the cart, add an If statement to check if the product being added has a size.  
    !- If the items not already in the cart, it just needs to be added to the cart, but it will be sent as a dictionary. This allows the item to have the same ID, but different sizes for each ID.
    !- If the item is already in the cart, check if another item with the same ID and same size already exists. If so it will incremenet the quantity. If not then it will set [it?] equal to the quantity.
    !- Now wrap the original code (if item_id in list) in an else block from the If size statement.
    !- In the context.py, change quantity to item_data except the key.
    !- Write an if statement that changes if the product has a size or not, finding this out by seeing if item_data is an integer or not.
    !- The original code should be implemented if the statement is true
    !- Else, get the product with get_object_or_404, from the Product model, pk=item_id
    !for loop for the size and quantity in all items that have a size field:
        !- Add the result of (quantity * price) to the total variable.
        !- Increment the cart product count by the quantity of the item.
        !- Append the item_id, quantity, product and size to the cart_items variable.
    !-git commit finished product size logic
ht !- Add plus and minus buttons to the quantity selector in product_detail.html.
js !- Implement JS:
    !- Function ensure the buttons are disabled correctly
        !- Needs to get the current quantity.
        !- Add a disabled property to the add button if the quantity is 99.
        !- Add a disabled property to the minus button if the quantity is more than 1.
    !- Function that changes the quantity up when the add button is clicked.
        !- e.prevent default
        !- Find the closest quantity input box with .closest and .find.
        !- get the current quantity value from the input box.
        !- Add 1 to the value of the quantity box.
        !- Call the function to check the buttons are disabled correctly.
    !- Function that changes the quantity down when the minus button is clicked.
        !- copy and paste the quantity up function and adjust for minusing.
    !- Function to check the buttons are enabled and disabled whenever the quantity value changes.
        !- Event listener for the quantity changing (.change)
        !- Calls the function to check the buttons.
!- Add the JS script onto the page.
!- git commit Added quantity +/- buttons.
!- Paste the form group into the cart.html where the quantity is displayed.
!- Adjust html and styling to fit the cart
!- Implement a size input.
!- Include the script on the cart page as well.
!- Add two buttons for removing an item for the cart and for updating the quantity and size.
!- Implement the JS for this. Function for removing the item and a function for updating.
!- Git commit added quantity boxes to the cart page.

!- Updating a product:
    !- Adjust cart function:
        !- Copy and paste the add_to_cart view, renaming to update_cart.
        !- Remove the redirect as it will redirect back to the cart.
        !- If the quantity is more than 0, find the product by size and update its quantity.
        !- If the quantity is 0, delete the item from the cart.
        !- If the cart has no size, update the quantity with quantity, or cart.pop the item.
    !- Update cart urls
    !- Add the url to the form action attribute. This will call the javascript to go to the view.
        (Note the quantity selector can go outside of the 1-99 range.)
    !- Remove item function:
        !- Copy and paste the adjust_cart view, renaming it to remove_from_cart.
        !- Remove quantity.
        !- If the item has a specific size, remove only the item with that size.
        !- If the item only has one size, delete the whole item. (Also add this to adjust_cart view)
        !- If the item didn't have any sizes at all, the delete the whole item.
        !- Return http.response code 200 as its being returned to JS.
    !- Add remove_from_cart to the URLs.
    !- In the JS update function, change size to product_size, and in the data variable.
    !- Update the data-size attribute to data-product_size in the update link. 
    !- Add slash to the end of the JS url.
    !- In cart app create a new folder called templatetags
    !- Create two files in this folder called cart_tools.py and __init__.py
    !- Look at cart_tools.py.
    !- Add the calc into the price part of the template.
    !- git commit -m "Added update_bag and remove_from_bag functions, as well as calc subtotal template filter"


!- Toasts:
    !- Create a folder called toasts within the includes folder.
    !- Create a file called toast_success.html.
    !- Paste in the code that was obtained from bootstrap.
    !- Create toast_info, toast_warning and toast_error .html and change the classes to match.
    !- In cart/views.py, import Products and django.contrib.messages.
    !- Get the product object in the add_to_cart function.
    !- Use the messages function to implement a message when the quantity has been updated.
    !- Add a script in postloadjs at the bottom of the page, which makes the toast elements shown.
    !- Add the MESSAGE_STORAGE variable in settings.py/
    !- Add CSS for .message-container .custom-toast and .toast-capper.
    !- Add a with statement in base.html to check the message level and display the correct toast.
    !- Add messages to wherever applicable throughout the views.py.
    !- Implement arrow CSS.
    -- Change the success message to show more information such as the bag items.


!- Checkout app
    !- startapp checkout
    !- models.py order class
        !- Fields: order_number, full_name, email, phone number, country, postcode, town_or_city, street_address1, street_address2, county, date, delivery_cost, order_total, grand_total
        !- Generate order number using uuid.uuid4(), Generates a random string of 32 characters.
        !- update_total, use aggregate function on (sum('lineitem_total')), check if delivery is free or half, find delivery cost and add it to the grand total.
        !- Save, overrides save, if the model doesn't have an order number, Generate_order_number gets called.
        !-__str__, returns order_number
    !-models.py OrderLineItem class
        !- Fields: order, product, product_size, quantity, lineitem_total
        !- save, override the usual save, multiplies the product price by the quantity, to get lineitem_total.
        !- __str__, returns the sku of the product.
    !- Dry run migrations, makemigrations, migrate.
    !- git commit -m "Created checkout app and models"

    !- Admin.py
        !- Import Order OrderLineItem
        !- class OrderAdmin(admin.ModelAdmin)
            !- readonly_fields = order_number, date, delivery_cost, order_total, grand_total.
            !- fields = sets the order of the fields display in admin.
            !- List_display = Shows only a few items.
            !- Ordering = -date
            !- inlines = (OrderLineItemAdminInline)

        !- class OrderLineItemAdminInline(admin.TabularInline)
            !- model = OrderLineItem
            !- readonly_fields = line item

        !- admin.site.register(Order, OrderAdmin) 
    
    !- signals.py
        !- create signals.py
        !- imports post_save and post_delete, sends signals after a post is saved or deleted.
        !- import receiver.
        !- import OrderLineItem

        !-function update on save. (sender, instance, created, **kwargs) sender of signal (OrderLineItem), instance of the model that sent it (each product line), create tells django whether its a new instance or one being updated, any key word arguments.
            !- instance,order.update_total()
            !- @receiver(post_save, sender=OrderLineItem)
        !- copy and paste for post delete.
        !apps.py to import signal.
    - forms.py
        !- Create forms.py
        !- Import forms from django and Order from models 
        !- class Order form
        !- Meta:
            !- Model is order
            !- Select the fields that will be written out.
        !- Overwritting __init__ to enable customisation.
            !- Calling the default __init__ method sets the form up as it would by default.
            !- Placeholders dictionary 
            !- Setting autofocus to true on the full name field sets the cursor to start on this field when the page loads.
            !- Iterating through the forms fields:
                !- Adding a star to the placeholder if the field is required.
                !- Setting placeholder to the values of the placeholder dictionary.
                !- Remove the form field labels, as the placeholders are set.
    !- git commit added forms.
    !- install crispy forms
        !- Add to installed apps.
        - Tell it what template pack to use (bootstrap 4)
        !- 'builtins': ['crispy_forms.templatetags.crispy_forms_tags', 'crispy_forms.templatetags.crispy_forms_field',]
        !- Add 'django.template.context_processors.media' (for the media), 'bag.contexts.bag_contents', (bag contents)
    !- views.py
        !- Create a checkout view.
        !- Get the cart from the session.
        !- If theres no cart, send an error message stating there's nothing in the cart and redirect to the products page.
        !- Empty instance of order form
        !- Template
        !- Context containing the order_form
        !- Render
    !- urls.py
        !- new urls file
        !- insert checkout url.
        !- In the main urls file, implement checkout urls.
    !- Templates
        !- Create checkout template directory.
        !- Copy cart template to the checkout.html file.
        !- Delete cart_items and table.
        !- Instructions to fill out the form
        !- Link to the css file.
        !- form action is "url checkout", method "post", id "payment_form", csrf token.
        !- render the form fields individually. {{ order_form.<fieldname> | as_crispy_field }}
        !- Option to save the information in the form to their profile.
        !- Option to login or sign up if the user is authenticated.
        !- Submit div: link back to the cart, or back to products page. Submit button. Information saying card will be charged.

    !- CSS
        !- Create static file within the app, another folder called checkout, then a style folder.


!- Stripe
    !- Install stripe with pip and add to requirements.text.
    !- In postloadjs on the checkout template, add the two JSON scripts.
    !- Views.py, add the JSON scripts to the context using the same keys.
    !- Add js to the checkout static folder.
    !- Write the js:
        !- Get the stripe public key from the template by getting the id.text whilst slicing the first and last character off.
        !- Use the same method to get the client secret key.
        !- Setting up stripe just requires using Stripe(stripe_public_key)
        !- Create stripe elements by using stripe.elements()
        !- Card element = elements.create('card')
        !- Mount the card to the #card-element div.
        !- The card element can be styled within the JS.
        !- Create the CSS for checkout.
        !- Handling real time validation errors:
            !- Add an event listener to the card for it changing. This means it will be checked every time the input is changed.
            !- If event.error:
                !- Create a html to display the error message.
                !- Set the html to the inner of the error div.
            !- Else:
                !- Set the html to the errorDiv to be empty.
        i- Stripe uses payment intents: when the payment goes to the processing page,
            the checkout view sends stripe a payment intent with the value of the shopping cart.
            Stripe then returns client_secret which we return back to the template. Client_secret is then used
            in the template to call confirmCardPayment() to verify the card.
    !- In settings.py:
        !- STRIPE_CURRENCY = 'gbp'
        !- STRIPE_PUBLIC_KEY
        !- STRIPE_SECRET_KEY

    !- In checkout/views.py:
        !- import bag_contents context.
        !- Set current_cart equal to the cart_contents request
        !- Set total equal to the current_cart('grand_total') value
        !- Stripe wants the value to be an integer, so round the total and times it to be 100. £39.99 becomes 3999p
        !- Set stripe public and secret keys to a variable with the same name.
        !- set stripe.api.key to stripe_secret_key
        !- Create the payment intent with stripe.paymentIntent.create(amount=stripe_total, currency = settings.STRIPE_CURRENCY)
    !- In stripe_payment.JS
        !- Handle the submission of the form:
            !- Add an event listener for the form being submitted.
            !- Prevent default.
            !- Prevent the card being updated.
            !- Set the submit button to disabled.
            !- Confirm card payment by sending the card details to stripe.
            - Then with the result, execute the following function:
                - If an error is returned:
                    !- Insert an error message into the error div, writing out what the error was.
                    !- Set disabled to false in the card.update variable.
                    !- Set disabled to false for the submit button.
                !- If there isn't an error:
                    !If result.paymentIntent.status is succeeded:
                        !- form.submit()
        !- Check the form is working by using the test card numbers.
        -- Create tests that use these cards.
    !- In views.py
        !- Create handling for checkout POST so the order gets uploaded to the database.
            !- if request.method is POST:
                !- Get the cart.
                !- form_data dictionary to include all the form fields.
                !- Set order_form = OrderForm(form_data)
                !-if the order_form is valid:
                    !- order = order_form.save()
                    !- iterate through each item in bag.items and add it to the order form:
                        !-Try:
                            !- get the productID
                            !- if item_data is an integer (only has quantity and not size):
                                !- Set order_line_item to be a dictionary with the order, product and quantity.
                                !- Save order_line_item
                            !- if item_data isn't an integer:
                                !- Iterate through the size and quantity of the item_data['items_by_size'].items():
                                    !- Set order_line_item to be a dictionary with the order, product, quantity and product_size.
                                    !- Save order_line_item
                        !- if the product doesn't exist
                            !- delete the empty order and return user to the cart page.
                            !- Send an error message, One of the products in your bag wasn't found in our database. Please call us for assistance.
                    !- Attach whether the user wanted to save their profile. request.session['save_info'] = 'save-info' in request.Post
                    !- reverse checkout_success to send the user to the success page with the order_number
                !- If the order form isn't valid, attach an error message to state there was an error with the form.
                -- See if we can get an error for what is wrong to tell the user.
            !- else:
                !- All the previous code is wrapped in the else statement.
            !- Import  OrderLineItem, OrderForm, Product and bag_contents.
        !- Create the checkout_success view:
            !- Get the save_info from the session context.
            !- order = order_number from the object in the Order model.
            !- Success message with their order_number and telling them they'll receive an email.
            !- Delete the shopping cart as the order has gone.
            !- Set the template to checkout_success.html
            !- context = "order" : order.

    !- Urls.py:
        !- Create URL for cart success.

    !- checkout_success.html:
        !- Create Checkout success page.
        !- Loop through the products in the order to display every item, with the name, size, quantity and price.
        !- Add an anchor to the product detail page for the product.
        !- Include order info, date, details, delivery address, billing info.
        !- If statement around second_line_address and county field.
    !- checkout/__init__.py:
        !- default_app_config = 'checkout.apps.CheckoutConfig'
    !- models.py:
        !- add or 0 to the order_total to prevent the order_total being set to none if every item is deleted.
    !- git commit -m "Added checkout success page functionality."
    !- checkout.html:
        !- Add loading spinner to the page.
    !- stripe.css:
        !- Add css for the loading spinner.
    !- stripe.js:
        !- Add .fadeToggle(100); to the payment form and loading-overlay
    !- git commit -m "Added loading spinner overlay"
    !- In checkout directory, create webhook_handler.py.
        !- Import HttpResponse.
        !- Create class StripeWH_Handler.
            !-__init__ is a set-up method called every time a new instance of the class is created.
                !- Use it to assign the request as an attribute of the class in case we need to access any attributes coming from stripe.
            !- create a method called handle_event(self, event):
                !- return HttpResponse with content, webhook received, type of event, status=200.
    !- git commit -m "Added webhook handler."
            !- Create method handle_payment_intent_succeeded. (Sent each time the payment process is completed)

            !- Second method incase the intent failed. handle_payment_intent_failed.
    !- urls.py
        !- create url for webhook. 'wh', webook, name="webhook"
        !- from .webhooks import webhook
    !- Webhooks.py
        !- Create webhooks.py
        !- Create webhooks function that takes request:
            !- Import settings, http response, webhook handler class, stripe, require post decorator, csrf excempt.
            !- Paste in from stripe with a few modifications.
            !- Setup:
                !- wh_secret = settings.STRIPE_WH_SECRET
                !- stripe.api_key = settings.STRIPE_SECRET_KEY
            !- Change endpoint secret to wh_secret.
            !- Add a generic exception handler to catch any other exceptions.
    !- settings.py
        !- STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')
    !- stripe website:
        !- Add endpoint: url/checkout/wh/
        !- click receive all events.
        !- Add endpoint, listen for all
        !- Add the environmental variables
    !- webhooks.py:
    !- modifying the webhook view to use the webhook handler:
        !- pass an instance of the webhook request to the handler.
        !- create a dictionary called event_map
            !- Keys are the names of the webhooks coming from stripe: 'payment_intent.succeeded'
            !- Values will be the methods inside the handler: handler.handle_payment_intent_succeeded
            !- complete for failed as well.
        !- Get the event from stripe
            !- store event['type'] in event_type eg. 'payment_intent.succeeded' or 'payment_intent.failed'
        !- event_handler = event_map.get(event_type, handler.handle_event), gets the value of the type from the dictionary.
        !- Call the event handler with the event: response = event_handler(event)
        !- return response stripe.
    !- git commit -m "Created webhook handlers"
    !- stripe_payment.js:
        !- add billing details and shipment to the payment method.
    !- Views.py to add if the user wants their information saved for next time.
        !- cache_checkout_data view:
            !- import post decorator and HttpResponse.
            !- require post decorator
            !- try:
                !- make a post request to this view and give it the client secret from the payment intent.
                !- store the client_secret ID in pid
                !- Set up stripe with the secret key so we can modify the payment intent
                !- Modify the payment intent: stripe.PaymentIntent.modify(pid, metadata={'cart': json.dumps(request.session.get('cart', {}),'save_info': request.POST.get('save_info'),'username': request.user})
                !- return HttpResponse with status 200
            !- except Exception as e:
                !- messages error: ' Sorry your payment cannot be processed right now.'
                !- return HttpResponse status 400
    !- Add the new view to urls.py
    !- stripe_payment.js:
        !- get the boolean value in saveInfo by checking if the checkbox save info is checked.
        !- add the csrf token.
        !- create the postData object with the csrf token, client secret and saveInfo.
        !- create the new url
        !- post the data to the view.
        !- Once the post is done, wrap the form handling into .done()
        !- Add a fail function, reloads the page.
    !- git commit -m "Added checkout form data chaching in payment intent"
    !- webhook_handler.py:
        !- copy the supplied data from the course material as the video is outdated.
        !- Add a loop that loops through the fields and values in shipping_details.address.items
        !- If the value is blank, set shipping_details.address[field] to None.
        !- Check if the order exists already, if it does then nothing needs to be done, if not create the order for the database in the webhook.
            !- Set order_exists to false
            !- set attempt = 1
            !- Create a while loop that will attempt up to 5 times:
                !try:
                    !- Try and store the order in order by using .get on Order.objects with field __iexact (make sure the fields match but not case sensitive)
                    !- Break if the order exists.
                !except Order.DoesNotExist:
                    !- Increment attempt by 1
                    !- Sleep for 5 seconds.
            !- If order_exists:
                !- Return a http.response to stripe, verifying the order exists in our database. Status=200
            !- Else:
                !try:
                    !- Create the order with all the fields.
                    !- Copy code from the view that does the same thing.
                    !- Don't load the cart from the session, load it from the json version in payment intent.
                    !- No form to save, instead use Order.objects.create with all the data from the payment intent.
                !except Exception as e:
                    !- If the order was created then delete it.
                    !- Return 500 to the server
            !- Return HttpResponse stating the order was created in the database by the webhook, status=200
    !- Models.py:
        !- Create original_cart field that will contain the original shopping bag that created it.
        !- Create stripe_pid field as it is guaranteed to be unique.
    !- admin.py:
        !- Add both new fields to the admin class.
    !- checkout.html:
        !- Add new hidden input (line 111)
    !- views.py:
        !- get the pid from the hidden input
        !- Save the stripe_pid field as pid.
        !- Save the original_cart field as the json dump of cart
        !- Save the order.
        !- Add commit=False to the first save event.
    !- webhook_handler.py:
        !- Add the original_cart and stripe_pid fields to the try statement that trys to find the order.
        !- Also add the fields when making the order later in the function if the order isn't found.
        !- import: Order, OrderLineItem from .models, Product from products.models, json and time
    !- git commit -m "Completed webhook handler and checkout functionality"


User Profile:
    !- startapp profiles
    !- add to settings
    !- profile model:
        !- import user from contrib.auth
        !- user = models.OneToOneField(User, on_delete=models.CASCADE)
        !- Other fields: phone_number, country, postcode, town_or_city, street_address1, street_address2, county, sign-up date, money spent, previous orders.
        !- Set null and blank = true. for the address and contact fields.
        !- Set the __str__
        !- Add a receiver for post_save, sender=User

    !- checkout model:
        !- import UserProfile
        !- Add a model field for adding a user.
        !- Migrate

    !- views.py:
        !- Create profile view.
        !- returns profile.html
        !- empty context

    !- urls.py:
        !- Create new urls.py file in profile app.
        !- Add url includes to the project url file.

    !- profile.html
        !- Create the HTML for the profile app.

    !- Css
        !- Create local static directory with CSS.

    !- All Auth templates:
        !- Adjust to ensure they follow the correct styling and structure.
        !- Adjust CSS by applying it to the inner content of the aull-auth-container div, to not apply the classes to every template.

    !- Base.html:
        !- Update the url for the profile page.

    - In views.py
        !- Import profile, URL and get_object_or_404
        !- Assign request.profile to the profile variable
        !- Add profile to context.

    !- In profile.html
        !- Render the profile.

    - Create the form for the User to edit their address.
        !- Copy the checkout forms.py
        - forms.py:
            !- Change the model that is imported, the name of the class, and the meta in the class
            !- Change the fields method to an exclude method, and exclude the user field
            !- Add default in front of all the fields.
            !- Change autofocus
            - Change the classes attribute to add match the site.
            !- Remove the asterisk on the country model.

        !- views.py:
            !- Import the form to the view.
            !- Add the form as a variable.
            !- Add the variable to the context.

        - profile.html:
            !- Add the crispy form to update the users address.
            !- Add another section for the previous orders.
            -- Show current shipping address.
            -- Add saved items list.

        - profile.css
            !- Add CSS to style the forms.
            - Country field is displaying as black still.
                !- Change CSS to display the colour as black after it has changed.
                !- Add JS
                    !- Get the value of the country field and store it in a variable.
                    !- If that value is empty:
                        !- Set the placeholder colour to the placeholder colour.
                    !- Add event listener for the value changing.
                        !- Get the value of the country field as a variable again.
                        !- if the field is empty, set to placeholder colour.
                        !- If the field isn't empty, set the colour to black.

       Setting the POST handler for the profile view.
        - Views.py:
            - import messages
            - if request.method is POST
                - Set the form to be the UserProfileForm with an instance of the profile.
                - If the form is valid:
                    - form.save()
                    - Success message
                    - Add the on_profile_page context and set to True

    - Toasts/message_success:
        - change if grand_total to if grand_total and not on_profile_page

    Order history
    - Profile.html:
        - Create a table showing order number, date, items, order total
        - for loop to display each order attached to the profile.
        - Order number is a link to order history URL with the order number. (trunchatechars:6)
        - date is from order.date
        - order total is the same
        - items field is an unorderedlist:
            - for item in order.lineitems.all
            - if has_sizes - display size, name and quantity (i.e M T-Shirt x 5)

    - Profile.css
        - max-height incase of loads of orders.
        - overflow-y: auto for scroll bar.

    views.py:
        - Import Order model.
        - order_history view
            - get the order from the model with the order number
            - info message for the order, confirming the order has already been placed and confirmed.
            - Set the template to the checkout success template.
            - Context:
                - Add order to the context
                - from_profile = True

    urls.py:
        - Create url for order history

    Checkout success:
        - Display a button to send the user back to the profile page rather than the special deals page.


    - Views.py
        -- Add a redirect if the user isn't authenticated, in case a URL is entered.
        -- Get 404 error and redirect
        -- Display error message.


    Attaching user to order
    - admin.py:
        - Add user_profile to fields.

    checkout/views.py:
        - Checkout success view:
            - if user.isAuthenticated:
                - Get the users profile and save in profile.
                - set order.user_profile to equal profile
                - order.save
                - if save_info:
                    - Save all the save_info into a dictionary.
                    - Store the UserProfile form in a variable, passing the dictionary and profile instance to the form.
                    - if the form is valid:
                        - save the form.
        - Checkout view:
            - If the user is authenticated:
                In a try statement:
                - Get the profile from the Profile model objects with request.user.
                - Get the order form and use initial={<dictionary>} with the details from profile to preset the form.
                except if the userprofile doesn't exist:
                - render empty form
            - If user isnt authenticated:
                - render empty form


    Sending confirmation email:
        In checkout app
        - Create confirmation_email folder.
            - Create confirmation_email_subject.txt
            - Create confirmation_email_body.txt
            - Fill out text with django template literals for personalised emails.

        - webhook_handler.py:
            - import send_mail from django.core.mail
            - import render_to_string from django.template.loader
            - import settings from django.conf
            - _send_confirmation_email(self, order) function:
                - store the customers email in a variable.
                - subject = render_to_string(confirmation_email_subject.txt, {'order' = order})
                - body = render_to_string(confirmation_email_body.txt, {'order': order, 'contact_email': settings.DEFAULT_FROM_EMAIL})
                - send_mail = (subject, body, settings.DEFAULT_FROM_EMAIL, [customers email variable]
            - if order exists:
                - self._send_confirmation_email(order)
            - if the order was created by the webhook handler:
                - before the status code 200 is sent to stripe: self._send_confirmation_email(order)

        settings.py:
            - Add DEFAULT_FROM_EMAIL = snaProducts@example.com at the bottom of the page




Saved Items:
    saved items app:
        -- Create new app
        -- Add the app to settings.py

    models.py:
        -- Add a saved items model.
        -- Fields:
            -- Many to Many key for products model.
            -- List name.
            -- is_gift.
            -- Public/Private
            -- List price
            -- Notify when on sale.
            -- Description.
        -- Function that creates list price by adding all the item prices together.
        -- migrate

    Views.py:
        -- Create List
            -- Displays a form page to create new list with all the fields from the model.
        -- Delete list
            -- Deletes the list as a whole.
        -- Update list
            -- Updates the details of a list (not the products)
        -- list view:
            -- Form to edit the list details
            -- Displays template
        -- Add to list view
            -- Adds an item to a list
        -- Remove from list view
            -- Removes item from list
        -- Adjust list view
            -- Adjusts the size of the item in the list.

    cart.html:
        -- Add to list button (Displays current lists or adds new list)
            -- Ask if the user wants to delete the product from the cart.
        -- Shows saved lists as a list at the bottom.
            -- Accordion to display

    saved_items.html
        -- Shows each list individually
        -- As a table, displays each product
            -- Same fields displayed as cart.
            -- Quantity selector
            -- Size selector if available
            -- Remove from list.
            -- Add to other list
            -- Button to add to cart (if item is in the cart, button to remove from cart).
        -- Delete list button.

    product_detail.html:
        -- Add to list button, same as cart.html

    profile.html:
        -- Display all lists in a table.
            -- Button to create a new empty list.
            -- Shows a card for each list.
            -- Clicking the card takes you to the list page.
            -- Displays how many items in each list, the name, description, price.

    urls.py:
        -- Create urls for creating list, deleting a list, updating a lists details, viewing list, adding to list, removing from list, updating items in the list.














