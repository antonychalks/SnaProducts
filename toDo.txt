___Done:___
Styling and Structure:
- Add URLs for products page on all nav includes and shop now button
- Add new products details function in views.py, copy all_products view and change details. Test first if possible.
- Update urls page with the product ID as the slug, view change and name to match view.
- Create products detail html page.
- Link the card anchors to the product detail page.
- Link the image on products detail to a new tab with just the image
- Add in the media query "max-width: 991px" if the header needs moving down.

Search:
- "action" attribute for the search bar form to link to the products in mobile nav and base.html.
- Change name attribute for search bar input.
- Views.py function for a get request with the name attribute within the get request.

Sorting and Filtering:
- In the views.py add an if statement that checks for categories and filter the results based on those categories.
- In the nav html documents, add the category searches into the link URLs.
- Add URLs to all products selections with ?price&direction=asc afterwards. main nav and side nav.
- current_sorting = f'{sort}_{direction}' in views.py
- Views.py, import Lower and everything in the if sort in request
- Add a category display on each product card on the list products page and product detail page
- Add html for a selection box in the products.html file for selecting how to sort the products.
- In views.py, add if sortkey == 'category': sortkey = 'category__name', so the categories are sorted by name rather than ID.
- Add a catergory display next to the products title at the top of the content of the page, using the current categories varibale.
-- Add a cross button to remove the chosen category from the filter.
-- When selecting a different sort function, have a toggle for asc or desc
- Create JS function that changes the sort selector. Done by getting the selector value and the url, splitting the selector value into type of sort and direction, and setting the URL to the new value, if the selector value - reset. Else the sort and direction will be deleted.
--To add the toggle function, add a new function that targets the toggle, and changed the url of the toggle is clicked.
- Fix a bug where the parent category doesn't display all the children.

Scroll to top:
- Add a back to top button onto list products page.
- Add script to scroll back to the top of the page.
-- Add a button the scroll up 1 line or down 1 line, so that every time the button is clicked it will display all new products.
-- Add a button that appears when a catergory is selected, to remove category filters.

Shopping cart:
- Add new app called cart and add app to settings.
- Create a new views function within the cart app.
- Create new directory: cart/templates/cart/cart.html.
- Copy index.html into cart.html and remove the content block.
- Copy the landing_page urls.py file to the cart app.
- Implement the cart urls in the project urls file.
- In base.html and other navigation files, implement the href url for the cart.
- Create the content for the cart template. Has to have an empty cart if statement.
- Create cart/contexts.py to help with the cart functionality
- Add the context to the context processor in settings. "'cart.contexts.cart_contents',"
- Add the "MIN_FREE_DELIVERY" & "MIN_HALF_DELIVERY" & "STANDARD_DELIVERY_PERCENTAGE"


___Pending:___
Misc
- Add testing for new views.py functionality
-- Create a dedicated image view page.
-- Overlay product image when clicked on the list_products.
-- Go through all the aria labels.

Featured products
-- Add a featured products box on the home page
-- Add admin functionality to add products to featured product either, on the product page, on the featured products admin page and on the products list admin page.

Special Offers
-- Add a field to product model called deal and is_new
-- Add an admin option to create a deal on a product based on percentage discount.
-- Add an admin option to create a deal based on price of shopping basket.
-- Function the change deal field automatically if a deal is applied.
-- Change the category function to search for active deal and is_new fields if that is what selected.

Scroll to top:
-- Adjust the up one row function so the first click will go up a level and center the row.

Sorting products:
- Add different categories. -- Needs more categories to sort by


Shopping cart:
-- On the cart page, add a row of 4 random products to the bottom of the page, with an add to cart button. When clicked: Message saying item added to cart, adds item to cart, that product will then be replaced by another product on the bottom of the screen"

Product page:
!-- White container background, leaving the off white background as a large border.
    Left top:
    !-- Image
    !-- Zoom button overlayed on the picture.

    Right of image:
    !-- Title to the right with tags underneath.
    !-- Rating.
    -- Quantity selector.
    !-- Free delivery over [MIN_FREE_DELIVERY] 
    !-- Half price delivery over [MIN_HALF_DELIVERY].
    !-- Price with different colour text to stand out. 
    -- Product delivery cost [STANDARD_DELIVERY_PERCENTAGE].
    !-- Add to cart and buy now button at the bottom.

    Underneath both:
    -- Description on the left
    -- Related Products on the right.
-- List tags under an accordion
-- Tags and rating on the same line

List Products:
-- On the list product page on phones, the images should be larger and not squashed for the products, maybe change to a side image card.
-- The department toggle button should start under the quantity of products line, then scroll with the page when scrolled enough.


Nav:
-- Hovering over the main categories should drop the menu down.

Adding products:
ht !- Add form with POST function to Product detail template.
py - Add to cart view in cart/views.py
py - Add to cart url in cart/urls.py
gi - git commit added cart functionality
py - In contexts.py add the "cart = request.session.get('cart', {})" to add to, or create the cart session
ht - Add the "for item_id, quantity in cart.items():" loop.
ht - In cart.html add html to show each product in table form.
gi - git commit Add context processor & updated shopping cart template
py - Add has_sizes to product model.
py - Migrate
ht - In the form on product_detail.html, add an if statement, if the product has sizes, add a selector for the size.
ht -- Add the size selector after add to cart has been clicked. -- Possibly add a 'purchasing' container for add to cart, buy now, size selector and quantity.
ht - Add if statement to adjust page layout
ht - Add size to the cart template. -- In an IF statment to only show if product has_sizes.
gi - git commit -m Added product sizes functionality.
    Adding size information to the shopping cart:
    - In add_to_cart view set size to none to start. Then if request.Post has product_size, set size to equal request.POST['size'].
    - To adjust the structure of the cart, add an If statement to check if the product being added has a size.  
    - If the items not already in the cart, it just needs to be added to the cart, but it will be sent as a dictionary. This allows the item to have the same ID, but different sizes for each ID.
    - If the item is already in the cart, check if another item with the same ID and same size already exists. If so it will incremenet the quantity. If not then it will set [it?] equal to the quantity.
    - Now wrap the original code (if item_id in list) in an else block from the If size statement.
    - In the context.py, change quantity to item_data except the key.
    - Write an if statement that changes if the product has a size or not, finding this out by seeing if item_data is an integer or not.
    - The original code should be implemented if the statement is true
    - Else, get the product with get_object_or_404, from the Product model, pk=item_id
    for loop for the size and quantity in all items that have a size field:
        - Add the result of (quantity * price) to the total variable.
        - Increment the cart product count by the quantity of the item.
        - Append the item_id, quantity, product and size to the cart_items variable.
    -git commit finished product size logic
ht !- Add plus and minus buttons to the quantity selector in product_detail.html.
js - Implement JS:
    - Function ensure the buttons are disabled correctly
        - Needs to get the current quantity.
        - Add a disabled property to the add button if the quantity is 99.
        - Add a disabled property to the minus button if the quantity is more than 1.
    - Function that changes the quantity up when the add button is clicked.
        - e.prevent default
        - Find the closest quantity input box with .closest and .find.
        - get the current quantity value from the input box.
        - Add 1 to the value of the quantity box.
        - Call the function to check the buttons are disabled correctly.
    - Function that changes the quantity down when the minus button is clicked.
        - copy and paste the quantity up function and adjust for minusing.
    - Function to check the buttons are enabled and disabled whenever the quantity value changes.
        - Event listener for the quantity changing (.change)
        - Calls the function to check the buttons.
- Add the JS script onto the page.
- git commit Added quantity +/- buttons.
- Paste the form group into the cart.html where the quantity is displayed.
- Adjust html and styling to fit the cart
- Implement a size input.
- Include the script on the cart page as well.
- Add two buttons for removing an item for the cart and for updating the quantity and size.
- Implement the JS for this. Function for removing the item and a function for updating.
- Git commit added quantity boxes to the cart page.


    
    


