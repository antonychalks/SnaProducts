___Done:___
Styling and Structure:
- Add URLs for products page on all nav includes and shop now button
- Add new products details function in views.py, copy all_products view and change details. Test first if possible.
- Update urls page with the product ID as the slug, view change and name to match view.
- Create products detail html page.
- Link the card anchors to the product detail page.
- Link the image on products detail to a new tab with just the image
- Add in the media query "max-width: 991px" if the header needs moving down.

Search:
- "action" attribute for the search bar form to link to the products in mobile nav and base.html.
- Change name attribute for search bar input.
- Views.py function for a get request with the name attribute within the get request.

Sorting and Filtering:
- In the views.py add an if statement that checks for categories and filter the results based on those categories.
- In the nav html documents, add the category searches into the link URLs.
- Add URLs to all products selections with ?price&direction=asc afterwards. main nav and side nav.
- current_sorting = f'{sort}_{direction}' in views.py
- Views.py, import Lower and everything in the if sort in request
- Add a category display on each product card on the list products page and product detail page
- Add html for a selection box in the products.html file for selecting how to sort the products.
- In views.py, add if sortkey == 'category': sortkey = 'category__name', so the categories are sorted by name rather than ID.
- Add a catergory display next to the products title at the top of the content of the page, using the current categories varibale.
-- Add a cross button to remove the chosen category from the filter.
-- When selecting a different sort function, have a toggle for asc or desc
- Create JS function that changes the sort selector. Done by getting the selector value and the url, splitting the selector value into type of sort and direction, and setting the URL to the new value, if the selector value - reset. Else the sort and direction will be deleted.
--To add the toggle function, add a new function that targets the toggle, and changed the url of the toggle is clicked.
- Fix a bug where the parent category doesn't display all the children.

Scroll to top:
- Add a back to top button onto list products page.
- Add script to scroll back to the top of the page.
-- Add a button the scroll up 1 line or down 1 line, so that every time the button is clicked it will display all new products.
-- Add a button that appears when a catergory is selected, to remove category filters.

Shopping cart:
- Add new app called cart and add app to settings.
- Create a new views function within the cart app.
- Create new directory: cart/templates/cart/cart.html.
- Copy index.html into cart.html and remove the content block.
- Copy the landing_page urls.py file to the cart app.
- Implement the cart urls in the project urls file.
- In base.html and other navigation files, implement the href url for the cart.
- Create the content for the cart template. Has to have an empty cart if statement.
- Create cart/contexts.py to help with the cart functionality
- Add the context to the context processor in settings. "'cart.contexts.cart_contents',"
- Add the "MIN_FREE_DELIVERY" & "MIN_HALF_DELIVERY" & "STANDARD_DELIVERY_PERCENTAGE"


___Pending:___
Misc
- Add testing for python functions. 
    - Views.py across all apps
        - Test for response codes to ensure page loads.
        - Test any Post requests with correct inputs and incorrect.
        - Test get requests return the correct responses.
    - Test context.py
        - Test for the correct results with pricing.    
        - Test for two descimal places.

!-- Create a dedicated image view page.
!-- Overlay product image when clicked on the list_products.
-- Go through all the aria labels.
- Annotate
    - Cart app
        - Python files 
        - Templates 
    - Products app
        - Python files 
        - Templates 
    - Landing page app
        - Python files 
        - Templates 
    - Templates dir
        - Include files
        - Base.html
        - Toasts
    - JS   
        - Doc strings for functions
        - Actions that are taking place.   
    - CSS

Featured products
-- Add a featured products box on the home page
-- Add admin functionality to add products to featured product either, on the product page, on the featured products admin page and on the products list admin page.

Special Offers
-- Add a field to product model called deal and is_new
-- Add an admin option to create a deal on a product based on percentage discount.
-- Add an admin option to create a deal based on price of shopping basket.
-- Function the change deal field automatically if a deal is applied.
-- Change the category function to search for active deal and is_new fields if that is what selected.

Scroll to top:
-- Adjust the up one row function so the first click will go up a level and center the row.

Sorting products:
- Add different categories. -- Needs more categories to sort by


Shopping cart:
-- On the cart page, add a row of 4 random products to the bottom of the page, with an add to cart button. When clicked: Message saying item added to cart, adds item to cart, that product will then be replaced by another product on the bottom of the screen"

Product page:
!-- White container background, leaving the off white background as a large border.
    Left top:
    !-- Image
    !-- Zoom button overlayed on the picture.

    Right of image:
    !-- Title to the right with tags underneath.
    !-- Rating.
    -- Quantity selector.
    !-- Free delivery over [MIN_FREE_DELIVERY] 
    !-- Half price delivery over [MIN_HALF_DELIVERY].
    !-- Price with different colour text to stand out. 
    -- Product delivery cost [STANDARD_DELIVERY_PERCENTAGE].
    !-- Add to cart and buy now button at the bottom.

    Underneath both:
    -- Description on the left
    -- Related Products on the right.
-- List tags under an accordion
-- Tags and rating on the same line

List Products:
-- On the list product page on phones, the images should be larger and not squashed for the products, maybe change to a side image card.
-- The department toggle button should start under the quantity of products line, then scroll with the page when scrolled enough.


Nav:
-- Hovering over the main categories should drop the menu down.
-- Implement a free delivery and half delivery tick box.

Adding products:
ht !- Add form with POST function to Product detail template.
py !- Add to cart view in cart/views.py
        !- Gets the current cart varible from the session.
        !- gets the redirect url
        !- If product_size is in request.POST then store it in the size variable
        !- If the item has a size variable, and if the item with the correct size is in the cart, the quantity should go up by the quantity amount
        !- If the item has a size variable, and the item is in the cart but not the correct size, add the item with the correct size to the cart
        !- If the item isn't in the cart already, then add the item, with the correct size into the cart.
        !- If the item doesn't have a size and is already in the cart, add the quantity to the item
        !- If the item without a size isn't in the cart, add it to the cart.
        !- Updates the session cart varible with the new cart variable
        !- Redirects the user to the redirect URL
py !- Add to cart url in cart/urls.py
gi !- git commit added cart functionality
py !- In contexts.py add the "cart = request.session.get('cart', {})" to add to, or create the cart session
ht !- Add the "for item_id, quantity in cart.items():" loop.
ht !- In cart.html add html to show each product in table form.
gi !- git commit "Updated shopping cart template"
py !- Add has_sizes to product model.
py !- Migrate
ht !- In the form on product_detail.html, add an if statement, if the product has sizes, add a selector for the size.
ht -- Add the size selector after add to cart has been clicked. -- Possibly add a 'purchasing' container for add to cart, buy now, size selector and quantity.
ht !- Add if statement to adjust page layout
ht !- Add size to the cart template. -- In an IF statment to only show if product has_sizes.
gi !- git commit -m Added product sizes functionality.
    Adding size information to the shopping cart:
    !- In add_to_cart view set size to none to start. Then if request.Post has product_size, set size to equal request.POST['size'].
    !- To adjust the structure of the cart, add an If statement to check if the product being added has a size.  
    !- If the items not already in the cart, it just needs to be added to the cart, but it will be sent as a dictionary. This allows the item to have the same ID, but different sizes for each ID.
    !- If the item is already in the cart, check if another item with the same ID and same size already exists. If so it will incremenet the quantity. If not then it will set [it?] equal to the quantity.
    !- Now wrap the original code (if item_id in list) in an else block from the If size statement.
    !- In the context.py, change quantity to item_data except the key.
    !- Write an if statement that changes if the product has a size or not, finding this out by seeing if item_data is an integer or not.
    !- The original code should be implemented if the statement is true
    !- Else, get the product with get_object_or_404, from the Product model, pk=item_id
    !for loop for the size and quantity in all items that have a size field:
        !- Add the result of (quantity * price) to the total variable.
        !- Increment the cart product count by the quantity of the item.
        !- Append the item_id, quantity, product and size to the cart_items variable.
    !-git commit finished product size logic
ht !- Add plus and minus buttons to the quantity selector in product_detail.html.
js !- Implement JS:
    !- Function ensure the buttons are disabled correctly
        !- Needs to get the current quantity.
        !- Add a disabled property to the add button if the quantity is 99.
        !- Add a disabled property to the minus button if the quantity is more than 1.
    !- Function that changes the quantity up when the add button is clicked.
        !- e.prevent default
        !- Find the closest quantity input box with .closest and .find.
        !- get the current quantity value from the input box.
        !- Add 1 to the value of the quantity box.
        !- Call the function to check the buttons are disabled correctly.
    !- Function that changes the quantity down when the minus button is clicked.
        !- copy and paste the quantity up function and adjust for minusing.
    !- Function to check the buttons are enabled and disabled whenever the quantity value changes.
        !- Event listener for the quantity changing (.change)
        !- Calls the function to check the buttons.
!- Add the JS script onto the page.
!- git commit Added quantity +/- buttons.
!- Paste the form group into the cart.html where the quantity is displayed.
!- Adjust html and styling to fit the cart
!- Implement a size input.
!- Include the script on the cart page as well.
!- Add two buttons for removing an item for the cart and for updating the quantity and size.
!- Implement the JS for this. Function for removing the item and a function for updating.
!- Git commit added quantity boxes to the cart page.

- Updating a product:
    !- Adjust cart function:
        !- Copy and paste the add_to_cart view, renaming to update_cart.
        !- Remove the redirect as it will redirect back to the bag.
        !- If the quantity is more than 0, find the product by size and update its quantity.
        !- If the quantity is 0, delete the item from the cart.
        - If the bag has no size, update the quantity with quantity, or bag.pop the item.
    !- Update cart urls
    !- Add the url to the form action attribute. This will call the javascript to go to the view.
        (Note the quantity selector can go outside of the 1-99 range.)
    - Remove item function:
        !- Copy and paste the adjust_cart view, renaming it to remove_from_bag.
        !- Remove quantity.
        !- If the item has a specific size, remove only the item with that size.
        !- If the item only has one size, delete the whole item. (Also add this to adjust_bag view)
        !- If the item didn't have any sizes at all, the delete the whole item.
        !- Return http.response code 200 as its being returned to JS.
    !- Add remove_from_bag to the URLs.
    !- In the JS update function, change size to product_size, and in the data variable.
    !- Update the data-size attribute to data-product_size in the update link. 
    !- Add slash to the end of the JS url.
    !- In cart app create a new folder called templatetags
    !- Create two files in this folder called cart_tools.py and __init__.py
    !- Look at cart_tools.py.
    !- Add the calc into the price part of the template.
    !- git commit -m "Added update_bag and remove_from_bag functions, as well as calc subtotal template filter"

- Toasts:
    !- Create a folder called toasts within the includes folder.
    !- Create a file called toast_success.html.
    !- Paste in the code that was obtained from bootstrap.
    !- Create toast_info, toast_warning and toast_error .html and change the classes to match.
    !- In cart/views.py, import Products and django.contrib.messages.
    !- Get the product object in the add_to_bag function.
    !- Use the messages function to implement a message when the quantity has been updated.
    !- Add a script in postloadjs at the bottom of the page, which makes the toast elements shown.
    !- Add the MESSAGE_STORAGE variable in settings.py/
    !- Add CSS for .message-container .custom-toast and .toast-capper.
    !- Add a with statement in base.html to check the message level and display the correct toast.
    !- Add messages to wherever applicable throughout the views.py.
    !- Implement arrow CSS.
    -- Change the success message to show more information such as the bag items.

- Checkout app
    !- startapp checkout
    !- models.py order class
        !- Fields: order_number, full_name, email, phone number, country, postcode, town_or_city, street_address1, street_address2, county, date, delivery_cost, order_total, grand_total
        !- Generate order number using uuid.uuid4(), Generates a random string of 32 characters.
        !- update_total, use aggregate function on (sum('lineitem_total')), check if delivery is free or half, find delivery cost and add it to the grand total.
        !- Save, overrides save, if the model doesn't have an order number, Generate_order_number gets called.
        !-__str__, returns order_number
    !-models.py OrderLineItem class
        !- Fields: order, product, product_size, quantity, lineitem_total
        !- save, override the usual save, multiplies the product price by the quantity, to get lineitem_total.
        !- __str__, returns the sku of the product.
    !- Dry run migrations, makemigrations, migrate.
    !- git commit -m "Created checkout app and models"

    !- Admin.py
        !- Import Order OrderLineItem
        !- class OrderAdmin(admin.ModelAdmin)
            !- readonly_fields = order_number, date, delivery_cost, order_total, grand_total.
            !- fields = sets the order of the fields display in admin.
            !- List_display = Shows only a few items.
            !- Ordering = -date
            !- inlines = (OrderLineItemAdminInline)

        !- class OrderLineItemAdminInline(admin.TabularInline)
            !- model = OrderLineItem
            !- readonly_fields = line item

        !- admin.site.register(Order, OrderAdmin) 
    
    !- signals.py
        !- create signals.py
        !- imports post_save and post_delete, sends signals after a post is saved or deleted.
        !- import receiver.
        !- import OrderLineItem

        !-function update on save. (sender, instance, created, **kwargs) sender of signal (OrderLineItem), instance of the model that sent it (each product line), create tells django whether its a new instance or one being updated, any key word arguments.
            !- instance,order.update_total()
            !- @receiver(post_save, sender=OrderLineItem)
        !- copy and paste for post delete.
        !apps.py to import signal.
    - forms.py
        !- Create forms.py
        !- Import forms from django and Order from models 
        !- class Order form
        !- Meta:
            !- Model is order
            !- Select the fields that will be written out.
        !- Overwritting __init__ to enable customisation.
            !- Calling the default __init__ method sets the form up as it would by default.
            !- Placeholders dictionary 
            !- Setting autofocus to true on the full name field sets the cursor to start on this field when the page loads.
            !- Iterating through the forms fields:
                !- Adding a star to the placeholder if the field is required.
                !- Setting placeholder to the values of the placeholder dictionary.
                !- Remove the form field labels, as the placeholders are set.
    !- git commit added forms.
    !- install crispy forms
        !- Add to installed apps.
        - Tell it what template pack to use (bootstrap 4)
        !- 'builtins': ['crispy_forms.templatetags.crispy_forms_tags', 'crispy_forms.templatetags.crispy_forms_field',]
        !- Add 'django.template.context_processors.media' (for the media), 'bag.contexts.bag_contents', (bag contents)
    !- views.py
        !- Create a checkout view.
        !- Get the bag from the session.
        !- If theres no bag, send an error message stating there's nothing in the bag and redirect to the products page.
        !- Empty instance of order form
        !- Template
        !- Context containing the order_form
        !- Render
    !- urls.py
        !- new urls file
        !- insert checkout url.
        !- In the main urls file, implement checkout urls.
    !- Templates
        !- Create checkout template directory.
        !- Copy cart template to the checkout.html file.
        !- Delete bag_items and table.
        !- Instructions to fill out the form
        - Link to the css file.
        !- form action is "url checkout", method "post", id "payment_form", csrf token.
        !- render the form fields individually. {{ order_form.<fieldname> | as_crispy_field }}
        !- Option to save the information in the form to their profile.
        !- Option to login or sign up if the user is authenticated.
        !- Submit div: link back to the cart, or back to products page. Submit button. Information saying card will be charged.

    - CSS
        - Create static file within the app, another folder called checkout, then a style folder.








    
    


